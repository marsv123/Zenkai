const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');

async function deployIMT() {
  try {
    console.log('üöÄ Starting simple IMT deployment...');
    
    // Connect to 0G testnet
    const provider = new ethers.JsonRpcProvider(process.env.RPC_0G);
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    
    console.log('Deployer:', wallet.address);
    const balance = await provider.getBalance(wallet.address);
    console.log('Balance:', ethers.formatEther(balance), 'OG');
    
    // Simple ERC20 bytecode (compiled separately)
    const bytecode = "0x608060405234801561001057600080fd5b50336040518060400160405280601f81526020017f496e74656c6c6967656e6365204d61726b6574706c61636520546f6b656e00815250604051806040016040528060038152602001624954544560e81b815250816003908161007591906101a3565b50600480546001600160a01b0319166001600160a01b0385161790558160059081610093919061025f565b50600680546001600160a01b0319166001600160a01b03851617905550505050610321565b600d548110156100e057600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50155565b506000818152600e60205260409020805460ff19169055565b61032180610106600039600f6000527f5a4e188a14f1fe7c3d879c6e96d1ec94da0b2d5c8b18eddb6dd6bafdbeb5e8a66010819052601080546001600160a01b038316601f8501811015610106576020015f5260405f6000602082013e506101ac565b6101ac6103de565b6040516200000000600160a01b039091168152919091507f000000000000000000000000000000000000000000000000000000000000000090600481015260248101829052604481015260408051920181529051602b8110156101f957600f5f5b506101f1565b506040805160208101935290815290913031565b506000913031565b506000915050565b506000915050565b506000915050565b506000915050565b5060015f9350925050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b506000915050565b50600051905091905056";
    
    // Deploy contract
    const factory = new ethers.ContractFactory([], bytecode, wallet);
    console.log('üì¶ Deploying...');
    
    const contract = await factory.deploy({
      gasLimit: 2000000,
      gasPrice: ethers.parseUnits('20', 'gwei')
    });
    
    console.log('‚è≥ Waiting for deployment...');
    await contract.waitForDeployment();
    
    const address = await contract.getAddress();
    console.log('‚úÖ IMT deployed to:', address);
    
    // Update frontend addresses
    const addresses = {
      IMT: address,
      ContributorNFT: "0x" + "0".repeat(40), // Placeholder
      DatasetRegistry: "0x" + "0".repeat(40), // Placeholder  
      chainId: 16601
    };
    
    const frontendPath = path.join(__dirname, '../frontend/constants/addresses.json');
    fs.writeFileSync(frontendPath, JSON.stringify(addresses, null, 2));
    
    console.log('üéâ Deployment complete!');
    console.log('üîó Explorer:', `https://chainscan-galileo.0g.ai/address/${address}`);
    
  } catch (error) {
    console.error('‚ùå Deployment failed:', error.message);
    process.exit(1);
  }
}

deployIMT();